/**

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

**/


#include "redis_client.h"
#include "resp_types.h"
#include <string>
#include <iostream>
#include <thread>
#include <map>
#include <functional>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#pragma GCC diagnostic pop

using namespace std;

const auto SET_COMMAND = "SET";
const auto SETNX_COMMAND = "SETNX";
const auto GET_COMMAND = "GET";
const auto DEL_COMMAND = "DEL";
const auto INCR_COMMAND = "INCR";
const auto SETEX_COMMAND = "SETEX";
const auto TTL_COMMAND = "TTL";
const auto EXP_COMMAND = "EXPIRE";
const auto RPUSH_COMMAND = "RPUSH";
const auto LPUSH_COMMAND = "LPUSH";
const auto LRANGE_COMMAND = "LRANGE";
const auto LLEN_COMMAND = "LLEN";
const auto LPOP_COMMAND = "LPOP";
const auto RPOP_COMMAND = "RPOP";
const auto SADD_COMMAND = "SADD";
const auto SREM_COMMAND = "SREM";
const auto SISMEMBER_COMMAND = "SISMEMBER";
const auto SMEMBERS_COMMAND = "SMEMBERS";
const auto SUNION_COMMAND = "SUNION";

redis_client::~redis_client() {}

void throw_when_response_is_error(resp_types::response& response) {
  if (response.type == resp_types::ERROR) {
    resp_types::error* response_error = (resp_types::error*)response.get_payload().get();

    spdlog::error("Error message received: ", response_error->get_payload());

    throw resp_types::resp_exception{response_error->get_payload()};
  }
}

resp_types::response send_command(vector<std::string> command_list, std::shared_ptr<abstract_resp> resp_client) {
  auto command = resp_types::command(command_list);
  auto response = resp_client->send_command(command);

  throw_when_response_is_error(response);

  return response;
}

std::vector<std::string> extract_strings(std::vector<std::shared_ptr<resp_types::serializable>> values) {
  resp_types::bulk_string* converted_value;
  std::vector<std::string> result_values{};

  for (auto& value : values) {
    converted_value = (resp_types::bulk_string*)value.get();
    result_values.push_back(converted_value->get_payload());
  }

  return result_values;
}

// Sets a value (using the SET-command)
void redis_client::set(string key, string value) {
  auto response = send_command({
    SET_COMMAND, key, value
  }, this->resp_client);
}

// Sets a value if it does not yet exist (using the SETNX-command)
int redis_client::setnx(string key, string value) {
  auto response = send_command({
    SETNX_COMMAND, key, value
  }, this->resp_client);
  
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

// Retrieves a value (using the GET-command)
string redis_client::get(string key) {
  auto response = send_command({
    GET_COMMAND, key
  }, this->resp_client);

  auto response_string = (resp_types::bulk_string*)response.get_payload().get();

  return response_string->get_payload();
}

int redis_client::del(string key) {
  auto response = send_command({
    DEL_COMMAND, key
  }, this->resp_client);
  
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::incr(string key) {
  auto response = send_command({
    INCR_COMMAND, key
  }, this->resp_client);
  
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::set_with_expire(string key, string value, int ttl) {
  auto response = send_command({
    SETEX_COMMAND, key, value, to_string(ttl)
  }, this->resp_client);
  
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::ttl(string key) {
  auto response = send_command({
    TTL_COMMAND, key
  }, this->resp_client);
  
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::expire(string key, int ttl) {
  auto response = send_command({
    EXP_COMMAND, key, to_string(ttl)
  }, this->resp_client);
  
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::rpush(string key, vector<string> values) {
  values.insert(values.begin(), key);
  values.insert(values.begin(), RPUSH_COMMAND);
  auto response = send_command(values, this->resp_client);
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::lpush(std::string key, std::vector<std::string> values) {
  values.insert(values.begin(), key);
  values.insert(values.begin(), LPUSH_COMMAND);

  auto response = send_command(values, this->resp_client);
  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

std::vector<std::string> redis_client::lrange(std::string key, int start, int end) {
  auto response = send_command({
    LRANGE_COMMAND,
    key,
    std::to_string(start),
    std::to_string(end)
  }, this->resp_client);

  auto response_value = (resp_types::array*)response.get_payload().get();
  auto response_values = response_value->get_values();

  auto result_values = extract_strings(response_values);

  return result_values;
}

int redis_client::llen(std::string key) {
  auto response = send_command({
    LLEN_COMMAND,
    key
  }, this->resp_client);

  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

std::string redis_client::lpop(std::string key) {
  auto response = send_command({
    LPOP_COMMAND,
    key
  }, this->resp_client);

  auto response_value = (resp_types::bulk_string*)response.get_payload().get();
  return response_value->get_payload();
}

std::string redis_client::rpop(std::string key) {
  auto response = send_command({
    RPOP_COMMAND,
    key
  }, this->resp_client);

  auto response_value = (resp_types::bulk_string*)response.get_payload().get();
  return response_value->get_payload();
}

int redis_client::sadd(std::string key, std::string value) {
  auto response = send_command({
    SADD_COMMAND,
    key,
    value
  }, this->resp_client);

  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::srem(std::string key, std::string value) {
  auto response = send_command({
    SREM_COMMAND,
    key,
    value
  }, this->resp_client);

  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

int redis_client::sismember(std::string key, std::string value) {
  auto response = send_command({
    SISMEMBER_COMMAND,
    key,
    value
  }, this->resp_client);

  auto response_value = (resp_types::integer*)response.get_payload().get();

  return response_value->get_value();
}

std::vector<std::string> redis_client::smembers(std::string key) {
  auto response = send_command({
    SMEMBERS_COMMAND,
    key,
  }, this->resp_client);

  auto response_value = (resp_types::array*)response.get_payload().get();
  auto response_values = response_value->get_values();

  auto result_values = extract_strings(response_values);

  return result_values;
}

std::vector<std::string> redis_client::sunion(std::string first_key, std::string second_key) {
  auto response = send_command({
    SMEMBERS_COMMAND,
    first_key,
    second_key,
  }, this->resp_client);

  auto response_value = (resp_types::array*)response.get_payload().get();
  auto response_values = response_value->get_values();

  auto result_values = extract_strings(response_values);

  return result_values;
}

subscriber redis_client::subscribe(std::string channel, std::function<void(resp_types::subscription_message)> callback) {
  return this->resp_client->subscribe(channel, callback, true);
}
subscriber redis_client::subscribe_sync(std::string channel, std::function<void(resp_types::subscription_message)> callback) {
  return this->resp_client->subscribe(channel, callback, false);
}

std::shared_ptr<resp_types::array> redis_client::transaction(std::vector<resp_types::command> commands) {
  commands.insert(commands.begin(), resp_types::command({
    "multi"
  }));

  for (auto& command : commands) {
    auto response = this->resp_client->send_command(command);
    throw_when_response_is_error(response);
  }

  auto response = this->resp_client->send_command(resp_types::command({
    "exec"
  }));

  throw_when_response_is_error(response);

  resp_types::array* response_value = (resp_types::array*)response.get_payload().get();

  return std::make_shared<resp_types::array>(response_value->get_values());
}


std::vector<resp_types::response> redis_client::send_pipelined(std::vector<resp_types::command> commands) {
  return this->resp_client->send_pipelined(commands);
}