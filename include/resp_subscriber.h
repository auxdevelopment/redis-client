/**

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

**/


#pragma once

#include <memory>
#include <functional>
#include <thread>
#include "resp_types.h"
#include "resp_parser.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#include "asio.hpp"
#pragma GCC diagnostic pop

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#pragma GCC diagnostic pop

class subscriber {
  private:
    std::shared_ptr<asio::ip::tcp::iostream> stream;
    std::function<void(resp_types::subscription_message)> callback;
    std::shared_ptr<std::thread> subscription_thread;
    std::shared_ptr<resp_parser> parser;
    std::string channel{};

    void handle_subscription() {
      auto command = resp_types::command({
        "subscribe",
        this->channel
      });

      std::string line{};

      try {
        *this->stream << command.serialize(); // subscribe channel_1 channel_2
        *this->stream >> line;

        resp_parser::remove_meta_data(line);
        auto response = this->parser->read_array_from_stream(line); // read initial subscribe response

        while (true) {
          *this->stream >> line;
          resp_parser::remove_meta_data(line);

          auto response = this->parser->read_array_from_stream(line);

          auto origin = ((resp_types::bulk_string*)response.at(1).get())->get_payload();
          auto message = ((resp_types::bulk_string*)response.at(2).get())->get_payload();

          auto sub_message = resp_types::subscription_message(origin, message);

          this->callback(sub_message);
        }
      } catch(std::exception&) { // should be triggered by calling the unsubscribe-method
        return;
      }
    }

  public:
    subscriber(std::string channel, std::function<void(resp_types::subscription_message)> callback, std::string host, int port, bool async) {
      this->channel = channel;
      this->callback = std::move(callback);

      this->stream = std::make_shared<asio::ip::tcp::iostream>(asio::ip::tcp::iostream(host, std::to_string(port)));
      this->parser = std::make_shared<resp_parser>(stream);

      this->subscription_thread = std::make_shared<std::thread>(&subscriber::handle_subscription, this);

      spdlog::info("Created new subscriber for handling subscription for channel: " + channel);

      if (async) {
        this->subscription_thread->detach();
        spdlog::info("Subscriber started in async mode.");
      } else {
        spdlog::info("Subscriber will be started in sync mode.");
        this->subscription_thread->join();
      }
    }

    subscriber(std::string channel, std::function<void(resp_types::subscription_message)> callback, std::string host, int port) 
      : subscriber(channel, callback, host, port, true) {}

    void unsubscribe() {
      spdlog::info("Unsubscribe for subscriber with topic " + this->channel + " was called.");

      // triggers invalid argument exception
      // which will get caught by the write-thread and
      // lead to its termination
      this->stream->close();
    }

};