/**

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

**/


#pragma once
#include "resp_types.h"
#include <string>
#include <memory>
#include <stdexcept>
#include <iostream>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#include "asio.hpp"
#pragma GCC diagnostic pop

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#pragma GCC diagnostic pop


class resp_parser {
  private:
    std::shared_ptr<asio::ip::tcp::iostream> stream;
  public:
    resp_parser(std::shared_ptr<asio::ip::tcp::iostream> stream) {
      this->stream = stream;
    }

    static resp_types::resp_response_type determine_type(std::string response_string) {
      char type_prefix = response_string.at(0);

      switch (type_prefix) {
        case resp_types::STRING_PREFIX:
          return resp_types::resp_response_type::STRING;
        case resp_types::FAILURE_PREFIX:
          return resp_types::resp_response_type::ERROR;
        case resp_types::INTEGER_PREFIX :
          return resp_types::resp_response_type::INTEGER;
        case resp_types::BULK_STRING_PREFIX:
          return resp_types::resp_response_type::BULK_STRING;
        case resp_types::ARRAY_PREFIX:
          return resp_types::resp_response_type::ARRAY;
        default:
          return resp_types::resp_response_type::ERROR;
      }
    }

    static void remove_meta_data(std::string& resp_line) {
      // remove : or - or + or $ or *
      resp_line.erase(0, 1);
    }

    std::vector<std::shared_ptr<resp_types::serializable>>
    read_array_from_stream(std::string& first_line) {

      int length{atoi(first_line.c_str())};
      resp_types::resp_response_type type;

      std::string line{};

      std::vector<std::shared_ptr<resp_types::serializable>> elements{};

      for (int i{0}; i < length; i++) {
        *stream >> line;

        type = resp_parser::determine_type(line);
        remove_meta_data(line);

        if (type == resp_types::BULK_STRING) {
          *stream >> line;
          elements.push_back(std::make_shared<resp_types::bulk_string>(line));
        }

        if (type == resp_types::INTEGER) {
          elements.push_back(std::make_shared<resp_types::integer>(atoi(line.c_str())));
        }

        if (type == resp_types::ERROR) {
          elements.push_back(std::make_shared<resp_types::error>(line));
        }

        if (type == resp_types::STRING) {
          elements.push_back(std::make_shared<resp_types::simple_string>(line));
        }
      }

      return elements;
    }

    resp_types::bulk_string
    read_bulk_string_from_stream() {
      std::string bulk_string_content_line{""};

      *stream >> bulk_string_content_line;
      
      return resp_types::bulk_string{bulk_string_content_line};
    }

    resp_types::response read_resp_message_from_stream() {
      std::string response_string{};
      *stream >> response_string;

      auto type = resp_parser::determine_type(response_string);
      remove_meta_data(response_string);

      if (type == resp_types::INTEGER) {
        return resp_types::response{
          type,
          std::make_shared<resp_types::integer>(resp_types::integer(atoi(response_string.c_str())))
        };
      }

      if (type == resp_types::STRING) {
        return resp_types::response{
          type,
          std::make_shared<resp_types::simple_string>(response_string)
        };
      }

      if (type == resp_types::ERROR) {
        return resp_types::response{
          type,
          std::make_shared<resp_types::error>(response_string)
        };
      }

      if (type == resp_types::BULK_STRING) {
        return resp_types::response{
          resp_types::BULK_STRING,
          std::make_shared<resp_types::bulk_string>(read_bulk_string_from_stream())
        };
      }

      if (type == resp_types::ARRAY) {
        return resp_types::response{
          resp_types::ARRAY,
          std::make_shared<resp_types::array>(read_array_from_stream(response_string))
        };
      }

      else {
        spdlog::error("Error while trying to parse RESP-message: " + response_string);
        return resp_types::response{
          resp_types::ERROR,
          std::make_shared<resp_types::error>("PARSING ERROR: Could not determine response type.")
        };
      }
    }
};