/**

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

**/


#pragma once
#include <string>
#include <vector>
#include <memory>
#include <exception>

namespace resp_types {
  const char STRING_PREFIX = '+';
  const char FAILURE_PREFIX = '-';
  const char INTEGER_PREFIX = ':';
  const char BULK_STRING_PREFIX = '$';
  const char ARRAY_PREFIX = '*';

  const std::string CRLF = "\r\n";

  enum resp_response_type {
    STRING = 0,
    ERROR = 1,
    BULK_STRING = 2,
    INTEGER = 3,
    ARRAY = 4
  };

  class serializable {
    public:
      virtual std::string serialize() = 0;
      virtual ~serializable() {}
      serializable() {}
  };

  class array : public serializable {
    private:
      std::vector<std::shared_ptr<serializable>> values;
    public:
      array(std::vector<std::shared_ptr<serializable>> values) {
        this->values = values;
      }

      std::string serialize() {
        return ";";
      }

      std::vector<std::shared_ptr<serializable>> get_values() {
        return this->values;
      }
  };

  class simple_string : public serializable {
    private:
      std::string payload;
    public:
      simple_string(std::string payload) {
        this->payload = payload;
      }

      std::string serialize() {
        return  STRING_PREFIX +
                this->payload +
                CRLF;
      }

      std::string get_payload() {
        return this->payload;
      }
  };

  class bulk_string : public serializable {
    private:
      std::string payload;
    public:
      bulk_string(std::string payload) {
        this->payload = payload;
      }

      std::string serialize() {
        std::string length = std::to_string(payload.length());

        return  BULK_STRING_PREFIX + 
                length +
                CRLF +
                this->payload +
                CRLF;
      }

      std::string get_payload() {
        return this->payload;
      }
  };

  class integer : public serializable {
    private:
      int value;
      std::string string_value;
    public:
      integer(int value) {
        this->value = value;
        this->string_value = std::to_string(value);
      }

      std::string serialize() {
        return  INTEGER_PREFIX +
                this->string_value +
                CRLF;
      }

      int get_value() {
        return this->value;
      }
  };

  class command : public serializable {
    private:
      std::vector<bulk_string> command_parts{};
    public:
      command(std::vector<std::string> command_parts) {
        for(auto& part : command_parts) {
          this->command_parts.push_back(bulk_string(part));
        }
      }

      std::string serialize() {
        std::string serialized_command = 
          ARRAY_PREFIX + 
          std::to_string(this->command_parts.size()) +
          CRLF;

        for (auto& part : this->command_parts) {
          serialized_command += part.serialize();
        }

        serialized_command += CRLF;

        return serialized_command;
      }
  };

  // Errors are equivalent to simple strings
  // except that their prefix and semantics are different
  class error : public simple_string {
    using simple_string::simple_string;
  };

  class response {
    public:
      resp_response_type type;
      std::shared_ptr<serializable> payload;

      response(resp_response_type type, std::shared_ptr<serializable> payload) {
        this->type = type;
        this->payload = payload;
      }

      ~response() {}

      std::shared_ptr<serializable> get_payload() {
        return this->payload;
      }
  };

  class subscription_response {
    public:
      std::string channel;
      std::string message;
      int subscribed_channels;

      subscription_response(std::string channel, std::string message, int subscribed_channels): 
        channel(channel), message(message), subscribed_channels(subscribed_channels) {}
  };

  class subscription_message {
    public:
      std::string channel;
      std::string message;

      subscription_message(std::string channel, std::string message): channel(channel), message(message) {}
  };

  class resp_exception : public std::exception {
      const char* error_message;
    public:
      resp_exception(std::string message) {
        this->error_message = message.c_str();
      }

      ~resp_exception() {
        delete error_message;
      }

      const char* what() const throw () {
        return this->error_message;
    }
  };
}